<ActorFrame
InitCommand="%function(self)

	songName = GAMESTATE:GetCurrentSong():GetSongDir();
	
	m_bl = 60/170 --use this to define length of a beat for use in the rest of the song
	sw = SCREEN_WIDTH
	sh = SCREEN_HEIGHT --shortcuts
	pam = 2
	
	function Plr(pn)
		return _G['P'..pn]
	end
	
end"
><children>

	<Layer
		Type="Quad"
		InitCommand="hidden,1"
		OnCommand="sleep,1000"
	/>

	<Layer File="modhelpers.xml"/>
	<!--Load Those Mods Son-->
	
	
	<Layer
		Type="Quad"
		OnCommand="hidden,1"
		InitCommand="%function(self)
		
			checked = false;
			
			init_modsp1 = '';
			init_modsp2 = '';
			
			mod_plr = {};
			
			mod_firstSeenBeat = GAMESTATE:GetSongBeat(); --necessary to prevent long freezes
			
---------------------------------------------------------------------------------------
----------------------Begin tables 'n stuff--------------------------------------------
---------------------------------------------------------------------------------------

			
			mods = {
				{0,999,'*-1 -1000 cover','end'},
			}
			
			mods_ease = {
			
			}
			
			local m = mod_insert		
			
			curaction = 1;
			
			mod_actions = {
			
			}
			
			local mm = mod_message	
---------------------------------------------------------------------------------------
----------------------Sort the actions table-------------------------------------------
---------------------------------------------------------------------------------------
			
			function modtable_compare(a,b)
				return a[1] < b[1]
			end
			
			if table.getn(mod_actions) > 1 then
				table.sort(mod_actions, modtable_compare)
			end
			
---------------------------------------------------------------------------------------
----------------------End tables 'n stuff----------------------------------------------
---------------------------------------------------------------------------------------
			
			self:queuecommand('Update');
			
		end"
		
		UpdateCommand="%function(self)

			if GAMESTATE:GetSongBeat()>=0 and not checked then
			
				local ThingsToGrab = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Lyrics','SongBackground','SongForeground','Overlay','Underlay'}
				local ThingsToHide = {'LifeP1','LifeP2','ScoreP1','ScoreP2','BPMDisplay','LifeFrame','ScoreFrame','Overlay','Underlay'}
				
				for i,v in ipairs(ThingsToGrab) do
					_G[v] = SCREENMAN:GetTopScreen():GetChild(v) or nil
				end
				
				for i,v in ipairs(ThingsToHide) do
					if _G[v] then _G[v]:hidden(1) end
				end
				
				--name players, judgment and combo
				for pn=1,pam do
					_G['P'..pn] = SCREENMAN:GetTopScreen():GetChild('PlayerP'..pn) or nil;
					if _G['P'..pn] then
						_G['jud'..pn] = _G['P'..pn]:GetChild('Judgment');
						_G['com'..pn] = _G['P'..pn]:GetChild('Combo');
						_G['P'..pn..'x_origin'] = _G['P'..pn]:GetX();
						_G['P'..pn..'y_origin'] = _G['P'..pn]:GetY();
					end
				end
				
				P1 = SCREENMAN:GetTopScreen():GetChild('PlayerP1');
				P2 = SCREENMAN:GetTopScreen():GetChild('PlayerP2');
				
				if P1 then
					jud1 = P1:GetChild('Judgment');
					com1 = P1:GetChild('Combo');
				end
				if P2 then
					jud2 = P2:GetChild('Judgment');
					com2 = P2:GetChild('Combo');
				end
				
				screen = SCREENMAN:GetTopScreen();
				
				checked = true; --let this only run once
				
			end

			local beat = GAMESTATE:GetSongBeat()
			showmods=''
			
---------------------------------------------------------------------------------------
----------------------Begin table handlers---------------------------------------------
---------------------------------------------------------------------------------------
			
			disable = false;
			if beat > mod_firstSeenBeat+0.1 and disable ~= true and checked then
				
				-----------------------
				-- Player mod resets --
				-----------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i=1,pam do
						mod_do('clearall',i)
					end
				end
				
				------------------------------------------------------------------------------
				-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
				------------------------------------------------------------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods) do
						if v and table.getn(v) > 3 and v[1] and v[2] and v[3] and v[4] then
							if beat >=v[1] then
								if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
									if table.getn(v) == 5 then
										mod_do(v[3],v[5]);
									else
										mod_do(v[3]);
									end
									
									--to display the current mods; this is implemented in a really stupid way
									showmods = (string.format('%.3f',v[1]))..', '..(string.format('%.3f',v[2]))..', '..(v[3])..', '..(v[4])..' - ('..(tostring(v[5]))..')\n'..(showmods);
								end
							end
						else
							SCREENMAN:SystemMessage('Bad beatmod: {'..tostring(v[1])..','..tostring(v[2])..','..tostring(v[3])..','..tostring(v[4])..','..tostring(v[5])..'}');
							v[1] = 0;
							v[2] = 0;
							v[3] = '';
							v[4] = 'error';
						end
					end
				end
				
				---------------------
				-- ease mod reader --
				----------------------
				-- written by Exschwasion (used with permission)
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					for i,v in pairs(mods_ease) do
						if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
							if beat >=v[1] then
								if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
									
									local duration = v[2];
									if v[6] == 'end' then duration = v[2] - v[1] end
									local curtime = (beat - v[1])/duration
									local diff = v[4] - v[3]
									local startstrength = v[3]
									local strength = nil
									local curve = v[7]
									
									if curve == 'quadout' then strength = -diff * curtime * (curtime - 2) + startstrength
									elseif curve == 'quadin' then strength = diff * curtime * curtime + startstrength
									elseif curve == 'quadboth' then curtime = curtime * 2
										if curtime < 1 then strength = diff * 0.5 * curtime * curtime + startstrength
										else strength = -diff * 0.5 * ((curtime - 1) * (curtime - 3) - 1) + startstrength end
									elseif curve == 'cubein' then strength = diff * math.pow(curtime, 3) + startstrength
									elseif curve == 'cubeout' then strength = diff * (math.pow(curtime - 1, 3) + 1) + startstrength
									elseif curve == 'cubeboth' then curtime = curtime * 2
										if curtime < 1 then strength = diff * 0.5 * math.pow(curtime, 3) + startstrength
										else strength = diff * 0.5 * (math.pow(curtime - 2, 3) + 2) + startstrength end
									elseif curve == 'qrtin' then strength = diff * math.pow(curtime, 4) + startstrength
									elseif curve == 'qrtout' then strength = -diff * (math.pow(curtime - 1, 4) - 1) + startstrength
									elseif curve == 'qrtboth' then curtime = curtime * 2
										if curtime < 1 then strength = diff * 0.5 * math.pow(curtime, 4) + startstrength
										else strength = diff * 0.5 * (math.pow(curtime - 2, 4) - 2) + startstrength end
									elseif curve == 'qntin' then strength = diff * math.pow(curtime, 5) + startstrength
									elseif curve == 'qntout' then strength = diff * (math.pow(curtime - 1, 5) + 1) + startstrength
									elseif curve == 'qntboth' then curtime = curtime * 2
										if curtime < 1 then strength = diff * 0.5 * math.pow(curtime, 5) + startstrength
										else strength = diff * 0.5 * (math.pow(curtime - 2, 5) + 2) + startstrength end
									elseif curve == 'sinin' then strength = -diff * math.cos(curtime * math.pi * 0.5) + diff + startstrength
									elseif curve == 'sinout' then strength = diff * math.sin(curtime * math.pi * 0.5) + startstrength
									elseif curve == 'sinboth' then strength = -diff * 0.5 * (math.cos(curtime * math.pi) - 1) + startstrength
									elseif curve == 'expin' then strength = diff * math.pow(2, 10 * (curtime - 1)) + startstrength
									elseif curve == 'expout' then strength = diff * (1 - math.pow(2, -10 * curtime)) + startstrength
									elseif curve == 'expboth' then curtime = curtime * 2
										if curtime < 1 then strength = diff * 0.5 * math.pow(2, 10 * (curtime - 1)) + startstrength
										else strength = diff * 0.5 * (2 - math.pow(2, -10 * curtime)) + startstrength end
									elseif curve == 'circin' then strength = -diff * (math.sqrt(1 - curtime * curtime) - 1) + startstrength
									elseif curve == 'circout' then strength = diff * math.sqrt(1 - (curtime - 1) * (curtime - 1)) + startstrength
									elseif curve == 'circboth' then curtime = curtime * 2
										if curtime < 1 then strength = -diff * 0.5 * (math.sqrt(1 - curtime * curtime) - 1) + startstrength
										else strength = diff * 0.5 * (math.sqrt(1 - (curtime - 2) * (curtime - 2)) + 1) + startstrength end
									else strength = curtime * diff + startstrength end
									
									if v[5] == 'xmod' then
										if table.getn(v) >= 8 then
											GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..'x',v[8]);
										else
											GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..'x');
										end
									else
										if table.getn(v) >= 8 then
											GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..' '..v[5],v[8]);
										else
											GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..' '..v[5]);
										end
									end
								elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
									if  v[8] then
										GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..' '..v[5], v[8]);
									else
										GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..' '..v[5]);
									end
								end
							end
						else
							SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
						end
					end
				end
				
				--------------------
				-- Perframe stuff --
				--------------------
				
				----------------------------
				-- Functions and messages --
				----------------------------
				if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
					while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
						if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
							if type(mod_actions[curaction][2]) == 'function' then
								mod_actions[curaction][2]()
							elseif type(mod_actions[curaction][2]) == 'string' then
								MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
							end
						end
						curaction = curaction+1;
					end
				end
				
			end
			
			self:sleep(0.02);
			self:queuecommand('Update');

---------------------------------------------------------------------------------------
----------------------end table handlers and perframe stuff----------------------------
---------------------------------------------------------------------------------------
			
		end"
	/>
	<Layer File="mods"/>
</children></ActorFrame>