<Layer Type="ActorFrame" InitCommand="%m_prefix(function(self)
if init then init = nil return end -- prevent init frum running twice
init = true
	math = setmetatable({}, {__index = _G.math})

	math.mod = function(a, b) 
		return a - math.floor(a/b)*b;
	end

	math.clamp = function(val, min, max)
		return math.min( math.max(val, min), max)
	end

	math.scale = function(val, in_min, in_max, out_min, out_max)
		return out_min + (val-in_min)*(out_max-out_min)/(in_max-in_min)
	end

	math.dist = function(x1, x2, y1, y2)
		local xd = x2 - x1
		local yd = y2 - y1
		return math.sqrt( xd * xd + yd * yd )
	end

	hal = {}
	hal.wiggle = function(t)
		local beat,len,amt,step,str = t[1],t[2],t[3],t[4],t[5]
		local j = 0
		for i = 0,(t.timing == 'end') and (len-beat)-(step) or len,step do
			local mult = (math.mod(j,2)+1)*2-3
			local to = (i == len) and 0 or amt
			local from = (i == 0) and 0 or amt
			mod {beat-(step/2)+i, step, str, (t.abs and math.mod(j,2) or mult)*from, (t.abs and math.mod(j+1,2) or -mult)*to, ease = t.ease, pn = t.pn, timing = 'len'}
			j = j + 1
		end
	end

	hal.bounce = function(t)
		local beat,len,start,apex,str = t[1],t[2],t[3],t[4],t[5]
		mod {beat, len/2, str, start, apex, ease = t.inEase, pn = t.pn, timing = 'len', sustain = t.inSus}
		mod {beat+(len/2)+(t.inSus or 0), len/2, str, (t.mirror and -apex or apex), start, ease = t.outEase, pn = t.pn, timing = 'len', sustain = t.outSus}
	end

	hal.join = function(t)
		local beat,len,amt1,amt2,str = t[1],t[2],t[3],t[4],t[5]
		local diff = 0.5-t.offset
		mod {beat, (len/2)-diff, str, amt1, (amt1+amt2)/2, ease = t.inEase, pn = t.pn, timing = 'len', sustain = t.inSus}
		mod {beat+(len/2)-diff+(t.inSus or 0), (len/2)+diff, str, (amt1+amt2)/2, amt2, ease = t.outEase, pn = t.pn, timing = 'len', sustain = t.outSus}
	end

	speedmod_convert = function(speed,which)
		local beat = GAMESTATE:GetSongBeat()
		if which == 'cmod' or which == 'mmod' then
			return beat * speed
		elseif which == 'xmod' then
			return speed / beat
		end
	end

	mojo = {}
	mojo.reverse_rotation = function(angleX, angleY, angleZ)
		local sinX,cosX,sinY,cosY,sinZ,cosZ = math.sin(angleX),math.cos(angleX),math.sin(angleY),math.cos(angleY),math.sin(angleZ),math.cos(angleZ)
		return { math.atan2(-cosX*sinY*sinZ-sinX*cosZ,cosX*cosY), math.asin(-cosX*sinY*cosZ+sinX*sinZ), math.atan2(-sinX*sinY*cosZ-cosX*sinZ,cosY*cosZ) }
	end

	mojo.rotate_and_counter = function(xDegrees, yDegrees, zDegrees, player_or_object)
		local DEG_TO_RAD = math.pi / 180;
		local angles = mojo.reverse_rotation(xDegrees * DEG_TO_RAD, yDegrees * DEG_TO_RAD, zDegrees * DEG_TO_RAD);
		local str = ''
		if type(player_or_object) == 'number' then
			str = '*-1 '..xDegrees..' rotationx, *-1 '..
			yDegrees..' rotationy, *-1 '..
			zDegrees..' rotationz, '
		else
			if player_or_object then
				player_or_object:rotationx(xDegrees)
				player_or_object:rotationy(yDegrees)
				player_or_object:rotationz(zDegrees)
			end
		end
		str = str..'*-1 '..(angles[1]*100)..' confusionxoffset, *-1 '..
		(angles[2]*100)..' confusionyoffset, *-1 '..
		(angles[3]*100)..' confusionzoffset';

		return str
	end

	mojo.getCounterRotation = function(xDegrees, yDegrees, zDegrees)
		local DEG_TO_RAD = math.pi / 180;
		local angles = mojo.reverse_rotation(xDegrees * DEG_TO_RAD, yDegrees * DEG_TO_RAD, zDegrees * DEG_TO_RAD);
		return {angles[1]*100, angles[2]*100, angles[3]*100}
	end

	mojo.axisRot = function(x,y,z,rad)
		local st = math.sin(rad*.5)
		local qx = x * st
		local qy = y * st
		local qz = z * st
		local qw = math.cos(rad*.5)
		local r2d = 180/math.pi
		
		return math.atan2(2 * (qy*qz + qw*qx), qw*qw - qx*qx - qy*qy + qz*qz) * r2d,
			   math.asin(-2*(qx*qz - qw*qy)) * r2d,
			   math.atan2(2*(qx*qy + qw*qz), qw*qw + qx*qx - qy*qy - qz*qz) * r2d
	end

	condor = {}
	condor.const1 = math.sqrt(math.pow(SCREEN_WIDTH/2,2)+math.pow(SCREEN_HEIGHT/2,2))
	condor.const2 = 180+math.deg(math.atan(SCREEN_HEIGHT/SCREEN_WIDTH))
	condor.zoom = function(amt)
		local s = SCREENMAN:GetTopScreen()
		s:x(SCREEN_WIDTH/2+(condor.const1*amt*math.cos((condor.const2)/180*math.pi)));
		s:y(SCREEN_HEIGHT/2+(condor.const1*amt*math.sin((condor.const2)/180*math.pi)));
		s:zoom(amt)
	end
	condor.rotation = function(ang)
		local s = SCREENMAN:GetTopScreen()
		s:x(SCREEN_WIDTH/2+(condor.const1*math.cos((ang+condor.const2)/180*math.pi)));
		s:y(SCREEN_HEIGHT/2+(condor.const1*math.sin((ang+condor.const2)/180*math.pi)));
		s:rotationz(ang)
	end



end)"
/>
