<ActorFrame><children>
<CODE Type="Quad" OnCommand="hidden,1"
	InitCommand="%function(self)
		
		function mod_do(str,pn)
			GAMESTATE:ApplyModifiers(str,pn)
		end			
		
		function mod_table_shuffle(t) --shuffles a table
			local n = table.getn(t)
			while n >= 2 do
				-- n is now the last pertinent index
				local k = math.random(n) -- 1 <= k <= n
				-- Quick swap
				t[n], t[k] = t[k], t[n]
				n = n - 1
			end
			return t
		end
		
		function modtable_compare(a,b)
			return a[1] < b[1]
		end
		
		function perframe( beat, endBeat )
			local cur = GAMESTATE:GetSongBeat();
			return cur >= mod_firstSeenBeat+1 and cur >= beat and cur < (endBeat or beat+1);
		end
		
		function mod_insert(beat,len,mod,t,pn)
			if not t then t = 'len' end
			table.insert(mods,{beat,len,mod,t,pn});
		end
		
		function mod2_insert(beat,len,mod,t,pn)
			if not t then t = 'len' end
			table.insert(mods2,{beat,len,mod,t,pn});
		end
		
		function mod_ease(beat,len,str1,str2,mod,t,ease,pn,sus,a,p)
			table.insert(mods_ease,{beat,len,str1,str2,mod,t,ease,pn,sus,a,p})
		end
		
		function mod_message(beat,msg,p)
			table.insert(mod_actions,{beat,msg,p});
		end
		
		function mod_blacklist(t,n)
			for i=1,table.getn(t) do
				if t[i] == n then
					return true
				end
			end
			return false
		end

		function ease_wiggle(beatS,beatE,amt,inc,str,ease,pn)
			local zoomtypes = {'', 'x', 'y', 'z'}
			local rotStart = 0
			local prevRot = amt
			local curRot = -amt
			for k,v in pairs(zoomtypes) do
				if str == 'zoom' .. v then curRot = math.max(-amt,0) end
			end
			for i = beatS,beatE,inc do
				if i == beatS then
					rotStart = 0
				else
					rotStart = prevRot
				end
				if i == beatE then
					rotEnd = 0
				else
					rotEnd = curRot
				end
					mod_ease(i, inc, rotStart, rotEnd, str, 'len', ease, pn)
					prevRot = prevRot *-1
					curRot = curRot *-1
			end
		end
	
	function absRandom(min,max)
		f = math.random(min,max)
		if f >= 0 then
			f = max
		end
		if f <= 0 then
			f = min
		end
		return f
	end
	
	function hideCol(beat_s,beat_e,which,pn)
		for col=0,3,1 do
			if which == col then
				mod_insert(beat_s,beat_e,'*-1 dark'..col..',*-1 stealth'..col..',*-1 hidenoteflash'..col,'end',pn)
			end
		end
	end

	function keepCol(beat_s,beat_e,which,pn)
		for col=0,3,1 do
			if which ~= col then
				mod_insert(beat_s,beat_e,'*-1 dark'..col..',*-1 stealth'..col..',*-1 hidenoteflash'..col,'end',pn)
			end
			if which == col then
				mod_insert(beat_s,beat_e,'*-1 no dark'..col..',*-1 no stealth'..col..',*-1 no hidenoteflash'..col,'end',pn)
			end
		end
	end

	function quickEase(beatS,beatE,sAmt,eAmt,str,sEase,eEase,pn,sustain)
		mod_ease(beatS,beatE,sAmt,eAmt,str,'len',sEase,pn,sustain)
		if sustain ~= nil then
			mod_ease(beatS+sustain,beatE,eAmt,sAmt,str,'len',eEase,pn,sustain)
		elseif sustain == nil then
			mod_ease(beatS+beatE,beatE,eAmt,sAmt,str,'len',eEase,pn,sustain)
		end
	end
	
	function forwardRotationConst(beatS,beatE,amt,axis,ease,pn)
		mod_ease(beatS,beatE,amt,0,'rotation'..axis..'','end',ease,pn)
		mod_ease(beatS,beatE,math.rad((amt*100))*-1,0,'confusion'..axis..'offset','end',ease,pn)
	end

	function forwardRotation(beatS,beatE,startAmt,endAmt,axis,ease,pn)
		mod_ease(beatS,beatE,startAmt,endAmt,'rotation'..axis..'','len',ease,pn)
		mod_ease(beatS,beatE,math.rad((startAmt*100))*-1,math.rad((endAmt*100))*-1,'confusion'..axis..'offset','len',ease,pn)
	end
	
	-- hey alright
	function modulo(a, b)
		return a - math.floor(a/b)*b;
	end
	
	function mod_wiggle(beat,num,div,amt,speed,mod,pn,first)
		if not speed then speed = 1 end
		local fluct = 1
		for i=0,(num-1) do
			b = beat+(i/div)
			local m = 1
			if i==0 and not first then m = 0.5 end
				table.insert(mods,{b,1,'*'..math.abs(m*speed*amt/10)..' '..(amt*fluct)..' '..mod..'','len',pn});
				fluct = fluct*-1;
			end
			table.insert(mods,{beat+(num/div),1,'*'..math.abs(amt*speed/20)..' no '..mod..'','len',pn});
	end

	function mod_sugarkiller(beat,duration,speed,minstealth,maxstealth,pn)
		if not minstealth then minstealth = 50 end
		if not maxstealth then maxstealth = 85 end
		if not speed then speed = 1 end
		local dur = duration
		if not dur then dur = 1 end
		dur = dur*speed;
		for i=0,math.max(dur-1,0) do
			table.insert(mods,{beat+(i*0.5),.25/speed,'*10000 Invert, *10000 no flip, *10000 '..maxstealth..'% Stealth','len',pn})
			table.insert(mods,{beat+(i*0.5)+.25/speed,.25/speed,'*10000 Flip, *10000 no invert, *10000 '..maxstealth..'% Stealth','len',pn})
			table.insert(mods,{beat+(i*0.5)+.50/speed,.25/speed,'*10000 Flip,*10000 -100% Invert,*10000 '..maxstealth..'% Stealth','len',pn})
			if i == math.max(dur-1,0) then
				table.insert(mods,{beat+(i*0.5)+.75/speed,.25/speed,'*10000 No Flip,*10000 No Invert,*10000 no Stealth','len',pn})
			else
				table.insert(mods,{beat+(i*0.5)+.75/speed,.25/speed,'*10000 No Flip,*10000 No Invert,*10000 '..minstealth..'% Stealth','len',pn})
			end
		end
	end

	function returnPlayers(beat,tween,time,persist)
		mod_message(beat,function(self)
			for pn=1,2 do
				local a=Plr(pn)
				if a then
					a:tween(time,''..tween..'(%f, 0, 1, 1)')
					a:x(sw*0.25)
					if pn == 2 then
						a:x(sw*0.75)
					end
				end
			end
		end,persist)
	end

	function centerPlayers(beat,tween,time,persist)
		mod_message(beat,function(self)
			for pn=1,2 do
				local a=Plr(pn)
				if a then
					a:tween(time,''..tween..'(%f, 0, 1, 1)')
					a:x(scx)
				end
			end
		end,persist)
	end

	function r2c(float)
		return (math.rad(float)*100)
	end

	function simple_funni(beat,length,str1,str2,pn)
		mod_insert(beat,length,str1,'len',pn)
		mod_insert(beat+length,length,str2,'len',pn)
	end
	
	end"
/>
</children></ActorFrame>