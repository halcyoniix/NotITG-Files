<Layer Type="ActorFrame" InitCommand="%function(self)
	function mod_beat_reader(beat)
		-- custom mod reader by TaroNuke edited by WinDEU and re-stolen by TaroNuke --
		for i,v in pairs(mods) do
			if beat >=v[1] then
				if (v[4] == 'len' and beat <=v[1]+v[2]) or (v[4] == 'end' and beat <=v[2]) then
					mod_do(v[3],v[5]);
				end
			end
		end
	end
	function actions_reader(beat)
		-- Functions and messages --
		while curaction<=table.getn(mod_actions) and GAMESTATE:GetSongBeat()>=mod_actions[curaction][1] do
			if mod_actions[curaction][3] or GAMESTATE:GetSongBeat() < mod_actions[curaction][1]+2 then
				if type(mod_actions[curaction][2]) == 'function' then
					mod_actions[curaction][2]()
				elseif type(mod_actions[curaction][2]) == 'string' then
					MESSAGEMAN:Broadcast(mod_actions[curaction][2]);
				end
			end
			curaction = curaction+1;
		end
	end
	function mod_ease_reader(beat)
		if beat > mod_firstSeenBeat+0.1 then -- performance coding!! --
			for i,v in pairs(mods_ease) do
				if v and table.getn(v) > 6 and v[1] and v[2] and v[3] and v[4] and v[5] and v[6] and v[7] then
					if beat >=v[1] then
						if (v[6] == 'len' and beat <=v[1]+v[2]) or (v[6] == 'end' and beat <=v[2]) then
							
							local duration = v[2];
							if v[6] == 'end' then duration = v[2] - v[1] end
							local curtime = beat - v[1]
							local diff = v[4] - v[3]
							local startstrength = v[3]
							local curve = v[7]
							local mod = v[5]
							
							local strength = curve(curtime, startstrength, diff, duration, v[10], v[11]) --extra parameters for back and elastic eases :eyes:
							
							-- 'confusionoffset+' will make the arrows flip back around if their backs are to the screen 
							if string.find(mod, '^confusion') and string.find(mod, '\+$') and modulo(strength, 628) > 157 and modulo(strength, 628) < 471 then
								strength = math.mod(strength, 628) - 314;
								mod = string.sub(mod, 1, -2)
							end
							
							if v[5] == 'xmod' then
								if table.getn(v) >= 8 then
									GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..'x',v[8]);
								else
									GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..'x');
								end
							else
								if table.getn(v) >= 8 then
									GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..' '..mod,v[8]);
								else
									GAMESTATE:ApplyGameCommand('mod,*-1 '..strength..' '..mod);
								end
							end
						elseif (v[9] and ((v[6] == 'len' and beat <=v[1]+v[2]+v[9]) or (v[6] == 'end' and beat <=v[9]))) then
							if v[5] == 'xmod' then
								if  v[8] then
									GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..'x', v[8]);
								else
									GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..'x');
								end
							else
								if  v[8] then
									GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..' '..v[5], v[8]);
								else
									GAMESTATE:ApplyGameCommand('mod,*-1 '..v[4]..' '..v[5]);
								end
							end
						end
					end
				else
					SCREENMAN:SystemMessage('Bad mod in beat-based ease table (line '..i..')');
				end
			end
		end
	end
end" />